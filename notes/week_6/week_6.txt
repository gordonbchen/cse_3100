fork
* create child process
* return process id
	* in parent process: child pid
	* in child process: 0
	* fail: -1
* sys call (handled by OS)
* resources copied: stack frame, heap, data segment

Definitions
* Process: instance of program being executed
* Multiprocessing OS: multiple programs and instances of programs can be executed at once
* Executing multiple programs:
	* Single-core: time-sharing
	* Multi-core: true parallelism + time-sharing

Process management (OS):
* Process table holds Process Control Block (PCB) for every process
* PCB holds all information related to process
* OS scheduler picks process to be executed
* When process suspended, state saved in PCB

Process creation:
* System init
* Shell process creates child processes to run commands
Process termination: program exit (normal, error, seg fault, user kill)

Unix commands:
* ps: view processes
* ps tree: process tree
* top: memory and CPU usage
* kill: kill process

Process lifetime: birth, life, death

Concurrency

Clone effects:
* memory 100% identical
* memory changes only affects copy
* files open in parent accessible in child, io ops change the same file

Wait: waiting for child to complete

Zombie process: dead process waiting to be reaped (checked by parent)
* Cannot be killed b/c already dead

Sys call: API from OS Kernel
* more expensive than normal function calls

exec family of functions: overwrites code segment in process
* no code after will be run if successful
* code after runs if exec fails
* loads binary into process code segment
* process upgrade
* doesn't affect open files
* if successful: can't see return value
* NULL-terminated command

* execl: specific path
* execlp: searches for binary in PATH
* execv or execvp: # arguments unknown at compile time (like main)

* last value in argv is NULL
* "gcc" "-0" "ab" "ab.c" "NULL"

* exit(0) to termiante processes with success code
* successful execl will overwrite code segment

file apis (IO)
* f family: fopen, fclose, fread, fgetc, fscanf, fprintf
* FILE* abstraction
* wrapper around sys call APIs
* open() is low level sys call
* stdin (0), stdout (1), stderr(2) are automatically inherited from parent proces
