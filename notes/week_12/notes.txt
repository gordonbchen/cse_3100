Socket: int socket(int domain, int type, int protocol)
* domain: AF_LOCAL (same host), AF_INET (IPv4), AF_INET6 (IPv6)
* type: SOCK_STREAM (TCP), SOCK_DGRAM (UDP)
* protocol: IP, 0
* return: file descriptor or -1 if error
* use close() to free resource

Bind: bind socket to address and port number
* int bind(int sockfd, const struct sockaddr* addr, socklen_t addrlen);

Listen: server socket starts listening
* int listen(int sockfd, int backlog)
* backlog: max length for pending connection queue

Accept: block until connection request comes from client
* int accept(int sockfd, struct sockaddr* addr, socklen_t* addrlen);
* builds connection: 3-way handshake
* returns new socket fd, used for client server communication
* old sockfd is only for establishing a connection

Connect: int connect(int socket, const struct sockaddr* address, socklen_t address_len);
* connects to ip address and port number, does 3-way handshake

getaddrinfo func to get linked list of results specifying IP address for domain name

Send: ssize_t send(int sfd, const void* vuf, size_t len, int flags);
* returns # bytes sent (not necessarily successfully recieved), or -1 on error
* sfd: socket fd for client server communication
* buf: pointer to data of size len bytes

recv: ssize_t recv(int sfd, void* buf, size_t len, int flags);

Layers: application, transport, network, link, physical
Protocols: communication between parties (ex TCP and IP)
TCP connection is between applications

Applications see byte streams in and out of sockets
* plain text: XML or JSON
* raw data: problems endianness and padding

Send 128
* plain text: ascii chars w/ delimiter, '1', '2', '8', '\n'
* raw data: 4 bytes (int), 0x00, 0x00, 0x00, 0x80 (or 0x80, 0x00, 0x00, 0x00?)

Byte ambiguity: 00000000 00000000 10000000
* 1st byte is most significant: 128
* 1st byte is least significant: 2^23

Endianness: byte order
* big-endian: most significant at smallest memory address (1st byte most significant)
* little-endian: 1st byte least significant
* both parties have to agree
* little endian is more common

Host byte order is platform dependent, network byte order is always big endian
* uint32_t htonl(uint32_t hostlong) host to network order
* uint32_t ntohl(uint32_t netlong) network to host order

ASCII (1 byte per char) vs Unicode (much more expressive)

Paddding / alignment problem
* client sends data (1234, "Bill Baker", 500)
* struct to be filled by server (id (int), name (char[]), balance (int))
* user explicit padding or reorder fields

XML: <id><12324></id>, extra tags are ignored
JSON: {'id': 1234}, ignores excess keys
* JSON is more efficient, fewer chars

Trivial File Transfer Protocol (TFTP)
* LS: list files on server side
* GET fn: download file fn from server
* EXIT: end session
* commands are ASCII strings ending with delimiter ("\n")

